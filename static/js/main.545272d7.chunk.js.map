{"version":3,"sources":["component/Card/Card.module.scss","logo.svg","component.png","component/Card/parse-helper.tsx","component/Card/index.ts","component/Card/Card.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","parser","str","splitStr","split","map","text","index","Card","imageSrc","title","desc","list","image","window","matchMedia","matches","desktop","mobile","className","styles","card","src","alt","description","item","idx","quantity","App","process","href","target","rel","logo","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,YAAc,4B,sICDvE,G,MAAA,IAA0B,kCCA1B,MAA0B,sC,8CCe1B,SAASC,EAAOC,GAM7B,IAEMC,EAAWD,EAAIE,MAFN,2BAIf,OACE,mCACGD,EAASE,KAAI,SAACC,EAAMC,GACnB,OAAOA,EAAQ,IAAM,EAAID,EAAO,+BAAwBA,GAAxB,UAAcC,SC3BvCC,MCgCR,YAA2D,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,KAIxCC,EAFeC,OAAOC,WAAW,sBAEdC,QAAUP,EAASQ,QAAUR,EAASS,OAC7D,OACE,sBAAKC,UAAWC,IAAOC,KAAvB,UAEE,qBAAKF,UAAWC,IAAOP,MAAvB,SACE,qBAAKS,IAAKT,EAAOU,IAAI,OAEvB,sBAAKJ,UAAWC,IAAOI,YAAvB,UACE,6BAAKvB,EAAOS,KACZ,4BAAIC,IACJ,6BACGC,EAAKP,KAAI,SAACoB,EAAMC,GAAS,IAAD,cACSD,EADT,GAChBE,EADgB,KACNH,EADM,KAEvB,OACE,+BACE,+BAAOG,IACP,+BAAOH,MAFAG,eCLRC,MAvCf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,CACEV,SAAU,CACRS,OAAO,GAAD,OAAKW,gCAAL,mCACNZ,QAAQ,GAAD,OAAKY,gCAAL,qCAETnB,MAAM,iDACNC,KAAK,oIAELC,KAAM,CACJ,CAAC,OAAQ,aACT,CAAC,MAAO,aACR,CAAC,OAAQ,cAGb,sBAAKO,UAAU,OAAf,UACE,6DAEE,uBACA,oBAAGA,UAAU,WAAWW,KAAK,sBAAsBC,OAAO,SAASC,IAAI,sBAAvE,UACE,sBAAMb,UAAU,iBAAhB,SACE,qBAAKG,IAAKW,EAAMd,UAAU,WAAWI,IAAI,WAF7C,cAQF,4BACE,mBAAGO,KAAMI,EAAT,SACE,qBAAKZ,IAAKY,EAAWX,IAAI,gBCxBtBY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.545272d7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__8WSJQ\",\"image\":\"Card_image__2vvO5\",\"description\":\"Card_description__1x0zd\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/component.df8cd575.png\";","import React from \"react\";\n\n/**\n * This parser function parses a string looking for markdown\n * bold styled text using double asterisks (**), and returns\n * a react fragment with that text enclosed in <span> tags.\n *\n * @param str string to be parsed for text to highlight.\n * @returns a React Fragment with the desired text to highlight enclosed in <span> elements.\n * @example\n * let str = \"These are **highlighted words**, **these aren't*\";\n * parser(str);\n * //returns:\n * <>These are <span>highlighted words</span>, **these aren't*</>\n */\nexport default function parser(str: string): React.ReactNode {\n  /**\n   * regexp to check if there are any words that match markdown bold pattern\n   * tab, linefeed, carriage return, and single \"*\" characters are ignored.\n   */\n  // eslint-disable-next-line\n  const regexp = /\\*\\*([^\\t\\n\\r\\*]*)\\*\\*/g;\n\n  const splitStr = str.split(regexp);\n\n  return (\n    <>\n      {splitStr.map((text, index) => {\n        return index % 2 === 0 ? text : <span key={`${index}`}>{text}</span>;\n      })}\n    </>\n  );\n}\n","import { Card } from \"./Card\";\nexport default Card;\nexport type { CardProps } from \"./Card\";\n","import React from \"react\";\nimport \"./Card.css\";\nimport styles from \"./Card.module.scss\";\n\nimport parser from \"./parse-helper\";\n\nexport type CardProps = {\n  /** object with public path of the card images for mobile and desktop\n   * @example\n   * { mobile: path, desktop: path }\n   */\n  imageSrc: {\n    mobile: string;\n    desktop: string;\n  };\n  /**\n   * Title of the card. Will highlight text enclosed in\n   * double asterisk (**), like in markdown.\n   * @example\n   * Get **valuable insights** that help...\n   */\n  title: string;\n  /** Card description */\n  desc: string;\n  /**\n   * An array of string tuples for the list.\n   * Each tuple has: [quantity, description]\n   * @example\n   * list = {[\"10k+\", \"companies\"], [\"314\", \"templates\"]}\n   */\n  list: [string, string][];\n};\n\nexport function Card({ imageSrc, title, desc, list }: CardProps) {\n  // media query to serve image depending on user screen\n  const mediaQuery = window.matchMedia(\"(min-width: 880px)\");\n  // if user starts on a device larger than 880px serve desktop image\n  let image = mediaQuery.matches ? imageSrc.desktop : imageSrc.mobile;\n  return (\n    <div className={styles.card}>\n      {/* <div className={styles.image} style={{ backgroundImage: \"url('/assets/image-header-desktop.jpg')\" }}> */}\n      <div className={styles.image}>\n        <img src={image} alt=\"\" />\n      </div>\n      <div className={styles.description}>\n        <h2>{parser(title)}</h2>\n        <p>{desc}</p>\n        <ul>\n          {list.map((item, idx) => {\n            const [quantity, description] = item;\n            return (\n              <li key={quantity}>\n                <span>{quantity}</span>\n                <span>{description}</span>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport component from \"./component.png\";\nimport \"./App.css\";\n\nimport Card from \"./component/Card\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Card\n        imageSrc={{\n          mobile: `${process.env.PUBLIC_URL}/assets/image-header-mobile.jpg`,\n          desktop: `${process.env.PUBLIC_URL}/assets/image-header-desktop.jpg`,\n        }}\n        title=\"Get **insights** that help your business grow.\"\n        desc=\"Discover the benefits of data analytics and make better decisions\n              regarding revenue, customer experience, and overall efficiency.\"\n        list={[\n          [\"10k+\", \"companies\"],\n          [\"314\", \"templates\"],\n          [\"12M+\", \"queries\"],\n        ]}\n      />\n      <div className=\"code\">\n        <p>\n          Reusable component made with\n          <br />\n          <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            <span className=\"logo-container\">\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </span>\n            React\n          </a>\n        </p>\n\n        <p>\n          <a href={component}>\n            <img src={component} alt=\"\" />\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}